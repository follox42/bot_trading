"""
G√©n√©rateur de signaux de trading modulaire et r√©utilisable.

Ce module permet de cr√©er et d'utiliser facilement des strat√©gies de trading
√† partir de blocs de conditions configurables. Il offre une interface propre
pour g√©n√©rer des signaux et param√®tres de risque utilisables dans n'importe
quel environnement de trading.

Author: Trading System Developer
Version: 2.0
"""

import numpy as np
from typing import Tuple, List, Dict, Any, Optional, Union
import logging
import traceback

# Import des modules du syst√®me de trading
from indicators import (
    IndicatorType, Operator, LogicOperator, Condition, Block, SignalGenerator as BaseSignalGenerator
)
from risk import PositionCalculator, RiskMode

class SignalGenerator:
    """
    G√©n√©rateur de signaux pour strat√©gies de trading algorithmiques.
    
    Cette classe encapsule toute la logique n√©cessaire pour charger une
    configuration de strat√©gie, g√©n√©rer des signaux de trading et calculer
    les param√®tres de gestion du risque. Elle utilise les composants de base
    du syst√®me de trading (SignalGenerator, PositionCalculator) pour cr√©er
    une interface unifi√©e et facile √† utiliser.
    """
    
    def __init__(self, config: Dict[str, Any], verbose: bool = False):
        """
        Initialise le g√©n√©rateur de signaux.
        
        Args:
            config: Dictionnaire de configuration de la strat√©gie
            verbose: Activer le mode verbeux pour plus d'informations
        """
        self.config = config
        self.strategy = BaseSignalGenerator()
        self.verbose = verbose
        self.logger = self._setup_logger()
        
        # Configuration des blocs de trading
        n_buy_blocks = self._setup_buy_blocks()
        n_sell_blocks = self._setup_sell_blocks()
        
        # Cr√©ation du calculateur de position
        self.position_calculator = self._setup_position_calculator()
        
        if verbose:
            print(f"‚úÖ Strat√©gie initialis√©e avec {n_buy_blocks} blocs d'achat et {n_sell_blocks} blocs de vente")
    
    def _setup_logger(self) -> logging.Logger:
        """
        Configure un logger pour le g√©n√©rateur de signaux.
        
        Returns:
            Logger configur√©
        """
        logger = logging.getLogger("SignalGenerator")
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            logger.addHandler(handler)
            
            # Niveau INFO si verbose, sinon WARNING
            logger.setLevel(logging.INFO if self.verbose else logging.WARNING)
        return logger
    
    def _setup_position_calculator(self) -> PositionCalculator:
        """
        Configure le calculateur de position bas√© sur les param√®tres de risque.
        
        Returns:
            PositionCalculator configur√©
        """
        # D√©terminer le mode de risque
        risk_mode_str = self.config.get('risk_mode', 'fixed')
        risk_mode = RiskMode.FIXED
        
        if risk_mode_str == 'atr_based' or risk_mode_str == 'dynamic_atr':
            risk_mode = RiskMode.ATR_BASED
        elif risk_mode_str == 'volatility_based' or risk_mode_str == 'dynamic_vol':
            risk_mode = RiskMode.VOLATILITY_BASED
        
        # Construire la configuration
        risk_config = {
            'base_position': self.config.get('base_position', 0.1),
            'base_sl': self.config.get('base_sl', 0.02),
            'tp_multiplier': self.config.get('tp_mult', 2.0)
        }
        
        # Ajouter des param√®tres sp√©cifiques selon le mode
        if risk_mode == RiskMode.ATR_BASED:
            risk_config.update({
                'atr_period': self.config.get('atr_period', 14),
                'atr_multiplier': self.config.get('atr_multiplier', 1.5)
            })
        elif risk_mode == RiskMode.VOLATILITY_BASED:
            risk_config.update({
                'vol_period': self.config.get('vol_period', 20),
                'vol_multiplier': self.config.get('vol_multiplier', 1.0)
            })
        
        return PositionCalculator(mode=risk_mode, config=risk_config)
    
    def _setup_buy_blocks(self) -> int:
        """
        Configure les blocs d'achat et retourne leur nombre.
        
        Returns:
            Nombre de blocs d'achat configur√©s
        """
        n_buy_blocks = self.config.get('n_buy_blocks', 0)
        
        for b_idx in range(n_buy_blocks):
            block = self._create_block('buy', b_idx)
            if block and len(block.conditions) > 0:
                self.strategy.add_block(block, is_buy=True)
        
        return len(self.strategy.buy_blocks)
    
    def _setup_sell_blocks(self) -> int:
        """
        Configure les blocs de vente et retourne leur nombre.
        
        Returns:
            Nombre de blocs de vente configur√©s
        """
        n_sell_blocks = self.config.get('n_sell_blocks', 0)
        
        for b_idx in range(n_sell_blocks):
            block = self._create_block('sell', b_idx)
            if block and len(block.conditions) > 0:
                self.strategy.add_block(block, is_buy=False)
        
        return len(self.strategy.sell_blocks)
    
    def _create_block(self, block_type: str, block_idx: int) -> Optional[Block]:
        """
        Cr√©e un bloc de conditions de trading √† partir de la configuration.
        
        Args:
            block_type: Type de bloc ('buy' ou 'sell')
            block_idx: Index du bloc
            
        Returns:
            Bloc cr√©√© ou None si √©chec
        """
        # Nombre de conditions dans le bloc
        n_conditions = self.config.get(f'{block_type}_block_{block_idx}_conditions', 0)
        
        if n_conditions <= 0:
            return None
        
        conditions = []
        logic_operators = []
        
        for c_idx in range(n_conditions):
            try:
                # Pr√©fixe de base pour les param√®tres de condition
                prefix = f"{block_type}_b{block_idx}_c{c_idx}"
                
                # R√©cup√©ration du premier indicateur
                ind1_type = self.config.get(f'{prefix}_ind1_type')
                if not ind1_type:
                    self.logger.warning(f"Type d'indicateur manquant pour {prefix}")
                    continue
                
                ind1_period = self.config.get(f'{prefix}_ind1_period', 14)
                indicator1 = f"{ind1_type}_{ind1_period}"
                
                # R√©cup√©ration de l'op√©rateur
                op_str = self.config.get(f'{prefix}_operator', '>' if block_type == 'buy' else '<')
                operator = Operator(op_str)
                
                # V√©rification si c'est une comparaison avec valeur ou indicateur
                if f'{prefix}_value' in self.config:
                    # Comparaison avec valeur
                    value = float(self.config[f'{prefix}_value'])
                    condition = Condition(
                        indicator1=indicator1,
                        operator=operator,
                        value=value
                    )
                elif f'{prefix}_ind2_type' in self.config:
                    # Comparaison entre indicateurs
                    ind2_type = self.config[f'{prefix}_ind2_type']
                    ind2_period = self.config.get(f'{prefix}_ind2_period', 50)
                    indicator2 = f"{ind2_type}_{ind2_period}"
                    
                    condition = Condition(
                        indicator1=indicator1,
                        operator=operator,
                        indicator2=indicator2
                    )
                else:
                    self.logger.warning(f"Ni valeur ni second indicateur trouv√© pour {prefix}")
                    continue
                
                conditions.append(condition)
                
                # Ajout de l'op√©rateur logique si n√©cessaire
                logic_key = f'{prefix}_logic'
                if c_idx < n_conditions - 1 and logic_key in self.config:
                    logic_operators.append(LogicOperator(self.config[logic_key]))
                
            except Exception as e:
                self.logger.warning(f"Erreur lors de la cr√©ation de la condition: {str(e)}")
                traceback.print_exc()
        
        # Cr√©ation du bloc si nous avons des conditions
        if conditions:
            # S'assurer que nous avons le bon nombre d'op√©rateurs logiques
            while len(logic_operators) < len(conditions) - 1:
                logic_operators.append(LogicOperator.AND)
            
            return Block(conditions=conditions, logic_operators=logic_operators)
        
        return None
    
    def generate_signals_and_parameters(
        self, 
        prices: np.ndarray, 
        high: Optional[np.ndarray] = None, 
        low: Optional[np.ndarray] = None,
        volumes: Optional[np.ndarray] = None
    ) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:
        """
        G√©n√®re les signaux de trading et les param√®tres de risque associ√©s.
        
        Args:
            prices: Array des prix de cl√¥ture
            high: Array des prix hauts (optionnel)
            low: Array des prix bas (optionnel)
            volumes: Array des volumes (optionnel)
            
        Returns:
            Tuple (signals, position_sizes, sl_levels, tp_levels)
            - signals: 1 pour achat, -1 pour vente, 0 pour neutre
            - position_sizes: Taille de position en % du capital
            - sl_levels: Niveaux de stop loss en % du prix
            - tp_levels: Niveaux de take profit en % du prix
        """
        if self.verbose:
            print(f"üîÑ G√©n√©ration de signaux pour {len(prices)} points de donn√©es...")
            
        # V√©rification des donn√©es
        if prices is None or len(prices) == 0:
            return np.array([]), np.array([]), np.array([]), np.array([])
        
        try:
            # Conversion en arrays numpy
            prices_np = np.asarray(prices, dtype=np.float64)
            high_np = np.asarray(high, dtype=np.float64) if high is not None else None
            low_np = np.asarray(low, dtype=np.float64) if low is not None else None
            volumes_np = np.asarray(volumes, dtype=np.float64) if volumes is not None else None
            
            # G√©n√©ration des signaux
            signals = self.strategy.generate_signals(
                prices=prices_np, 
                high=high_np, 
                low=low_np, 
                volumes=volumes_np
            )
            
            # Calcul des param√®tres de risque
            position_sizes, sl_levels, tp_levels = self.position_calculator.calculate_risk_parameters(
                prices=prices_np, 
                high=high_np, 
                low=low_np
            )
            
            # Affichage des statistiques si en mode verbeux
            if self.verbose:
                buy_count = np.sum(signals == 1)
                sell_count = np.sum(signals == -1)
                neutral_count = np.sum(signals == 0)
                
                print("\nüìä Statistiques des signaux:")
                print(f"  ‚Ä¢ Total: {len(signals)} points")
                print(f"  ‚Ä¢ Achat: {buy_count} ({buy_count/len(signals)*100:.2f}%)")
                print(f"  ‚Ä¢ Vente: {sell_count} ({sell_count/len(signals)*100:.2f}%)")
                print(f"  ‚Ä¢ Neutres: {neutral_count} ({neutral_count/len(signals)*100:.2f}%)")
            
            return signals, position_sizes, sl_levels, tp_levels
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la g√©n√©ration des signaux: {str(e)}")
            traceback.print_exc()
            return np.array([0]), np.array([0]), np.array([0]), np.array([0])
    
    def convert_to_actions(
        self, 
        prices: np.ndarray, 
        high: Optional[np.ndarray] = None, 
        low: Optional[np.ndarray] = None,
        volumes: Optional[np.ndarray] = None
    ) -> np.ndarray:
        """
        Convertit les signaux en format d'actions pour environnement de trading.
        
        Args:
            prices: Array des prix de cl√¥ture
            high: Array des prix hauts (optionnel)
            low: Array des prix bas (optionnel)
            volumes: Array des volumes (optionnel)
            
        Returns:
            Array d'actions [direction, taille, sl, tp, levier]
        """
        # Afficher la strat√©gie pour information
        if self.verbose:
            self.display_strategy()
            
        # V√©rification des donn√©es
        if prices is None or len(prices) == 0:
            return np.array([[0, 0, 0, 0, 1.0]])
        
        try:
            # G√©n√©ration des signaux et param√®tres
            signals, pos_sizes, sl_levels, tp_levels = self.generate_signals_and_parameters(
                prices, high, low, volumes
            )
            
            # Configuration du levier
            leverage = float(self.config.get('leverage', 1.0))
            
            # Cr√©ation du tableau d'actions
            n_candles = len(signals)
            actions = np.zeros((n_candles, 5), dtype=np.float32)
            
            # Remplissage du tableau d'actions
            for i in range(n_candles):
                if signals[i] != 0:
                    actions[i] = [
                        float(signals[i]),        # Direction
                        float(pos_sizes[i]),      # Taille de position
                        float(sl_levels[i]),      # Stop loss
                        float(tp_levels[i]),      # Take profit
                        float(leverage)           # Levier
                    ]
                else:
                    actions[i] = [0.0, 0.0, 0.0, 0.0, leverage]
            
            return actions
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la conversion en actions: {str(e)}")
            traceback.print_exc()
            return np.array([[0, 0, 0, 0, 1.0]])
    
    def display_strategy(self) -> None:
        """Affiche un r√©sum√© propre de la strat√©gie configur√©e."""
        print("\n")
        print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ         R√âSUM√â DE LA STRAT√âGIE      ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        
        # Blocs d'achat
        if self.strategy.buy_blocks:
            print(f"\nüü¢ SIGNAUX D'ACHAT ({len(self.strategy.buy_blocks)} blocs):")
            for i, block in enumerate(self.strategy.buy_blocks):
                print(f"  ‚Ä¢ Bloc {i+1}: {block}")
        else:
            print("\nüü¢ SIGNAUX D'ACHAT: Aucun configur√©")
        
        # Blocs de vente
        if self.strategy.sell_blocks:
            print(f"\nüî¥ SIGNAUX DE VENTE ({len(self.strategy.sell_blocks)} blocs):")
            for i, block in enumerate(self.strategy.sell_blocks):
                print(f"  ‚Ä¢ Bloc {i+1}: {block}")
        else:
            print("\nüî¥ SIGNAUX DE VENTE: Aucun configur√©")
        
        # Gestion du risque
        print("\n‚ö†Ô∏è GESTION DU RISQUE:")
        print(f"  ‚Ä¢ Mode: {self.config.get('risk_mode', 'fixed')}")
        print(f"  ‚Ä¢ Taille de position: {self.config.get('base_position', 0.1)*100:.1f}%")
        print(f"  ‚Ä¢ Stop loss: {self.config.get('base_sl', 0.02)*100:.2f}%")
        print(f"  ‚Ä¢ Take profit: {self.config.get('base_sl', 0.02)*self.config.get('tp_mult', 2.0)*100:.2f}%")
        print(f"  ‚Ä¢ Levier: {self.config.get('leverage', 1.0):.1f}x")
        
        # Param√®tres sp√©cifiques au mode de risque
        if self.config.get('risk_mode') == 'dynamic_atr' or self.config.get('risk_mode') == 'atr_based':
            print(f"  ‚Ä¢ P√©riode ATR: {self.config.get('atr_period', 14)}")
            print(f"  ‚Ä¢ Multiplicateur ATR: {self.config.get('atr_multiplier', 1.5):.2f}")
        elif self.config.get('risk_mode') == 'dynamic_vol' or self.config.get('risk_mode') == 'volatility_based':
            print(f"  ‚Ä¢ P√©riode volatilit√©: {self.config.get('vol_period', 20)}")
            print(f"  ‚Ä¢ Multiplicateur volatilit√©: {self.config.get('vol_multiplier', 1.0):.2f}")
        
        # Param√®tres de position
        if 'margin_mode' in self.config:
            margin_mode = "Crois√©e" if self.config['margin_mode'] == 1 else "Isol√©e"
            print(f"  ‚Ä¢ Mode de marge: {margin_mode}")
        
        if 'trading_mode' in self.config:
            trading_mode = "Hedge" if self.config['trading_mode'] == 1 else "One-way"
            print(f"  ‚Ä¢ Mode de trading: {trading_mode}")
        
        print("\n")
    
    def save_to_json(self, filepath: str) -> bool:
        """
        Sauvegarde la configuration de la strat√©gie au format JSON.
        
        Args:
            filepath: Chemin du fichier de sortie
            
        Returns:
            bool: True si la sauvegarde a r√©ussi, False sinon
        """
        import json
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=4, ensure_ascii=False)
            
            if self.verbose:
                print(f"‚úÖ Configuration sauvegard√©e dans {filepath}")
            return True
        except Exception as e:
            self.logger.error(f"Erreur lors de la sauvegarde de la configuration: {str(e)}")
            return False

    @classmethod
    def load_from_json(cls, filepath: str, verbose: bool = False) -> 'SignalGenerator':
        """
        Charge une configuration de strat√©gie depuis un fichier JSON.
        
        Args:
            filepath: Chemin du fichier de configuration
            verbose: Activer le mode verbeux
            
        Returns:
            Instance de SignalGenerator configur√©e
        """
        import json
        
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            if verbose:
                print(f"‚úÖ Configuration charg√©e depuis {filepath}")
            
            return cls(config, verbose)
        except Exception as e:
            logging.error(f"Erreur lors du chargement de la configuration: {str(e)}")
            raise ValueError(f"Impossible de charger la configuration depuis {filepath}: {str(e)}")


# Fonction utilitaire pour tester le g√©n√©rateur de signaux
def test_signal_generator(config: Dict[str, Any], data_path: str) -> None:
    """
    Teste le g√©n√©rateur de signaux sur des donn√©es historiques.
    
    Args:
        config: Configuration de la strat√©gie
        data_path: Chemin vers le fichier de donn√©es CSV
    """
    try:
        import pandas as pd
        import matplotlib.pyplot as plt
        
        # Chargement des donn√©es
        print(f"üìä Chargement des donn√©es depuis {data_path}...")
        df = pd.read_csv(data_path)
        
        # V√©rification des colonnes requises
        required_columns = ['close']
        if not all(col in df.columns for col in required_columns):
            print(f"‚ùå Colonnes requises manquantes. Le CSV doit contenir: {required_columns}")
            return
        
        # Colonnes optionnelles
        high = df['high'].values if 'high' in df.columns else None
        low = df['low'].values if 'low' in df.columns else None
        volumes = df['volume'].values if 'volume' in df.columns else None
        
        # Cr√©ation du g√©n√©rateur de signaux
        print("üîß Initialisation du g√©n√©rateur de signaux...")
        generator = SignalGenerator(config, verbose=True)
        
        # G√©n√©ration des signaux
        prices = df['close'].values
        print("‚öôÔ∏è G√©n√©ration des signaux...")
        signals, position_sizes, sl_levels, tp_levels = generator.generate_signals_and_parameters(
            prices, high, low, volumes
        )
        
        # Cr√©ation d'un DataFrame des r√©sultats
        result_df = pd.DataFrame({
            'timestamp': df.index,
            'close': prices,
            'signal': signals,
            'position_size': position_sizes,
            'sl_level': sl_levels,
            'tp_level': tp_levels
        })
        
        # Analyse des signaux
        buy_signals = (signals == 1).sum()
        sell_signals = (signals == -1).sum()
        
        print("‚úÖ Test termin√©!")
        print(f"üìà Signaux d'achat: {buy_signals}")
        print(f"üìâ Signaux de vente: {sell_signals}")
        
        # Visualisation simple des signaux
        plt.figure(figsize=(12, 6))
        plt.plot(df.index, prices, label='Prix')
        plt.scatter(df.index[signals == 1], prices[signals == 1], color='green', label='Achat', marker='^')
        plt.scatter(df.index[signals == -1], prices[signals == -1], color='red', label='Vente', marker='v')
        plt.legend()
        plt.title('Signaux de Trading')
        plt.grid(True)
        plt.show()
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        traceback.print_exc()

# Exemple d'utilisation
if __name__ == "__main__":
    print("üöÄ Test du g√©n√©rateur de signaux")
    
    # Exemple de configuration
    example_config = {
        # Configuration des blocs d'achat
        'n_buy_blocks': 1,
        'buy_block_0_conditions': 2,
        'buy_b0_c0_ind1_type': 'EMA',
        'buy_b0_c0_ind1_period': 10,
        'buy_b0_c0_operator': '>',
        'buy_b0_c0_ind2_type': 'EMA',
        'buy_b0_c0_ind2_period': 20,
        'buy_b0_c0_logic': 'and',
        'buy_b0_c1_ind1_type': 'RSI',
        'buy_b0_c1_ind1_period': 14,
        'buy_b0_c1_operator': '>',
        'buy_b0_c1_value': 50,
        
        # Configuration des blocs de vente
        'n_sell_blocks': 1,
        'sell_block_0_conditions': 1,
        'sell_b0_c0_ind1_type': 'RSI',
        'sell_b0_c0_ind1_period': 14,
        'sell_b0_c0_operator': '<',
        'sell_b0_c0_value': 30,
        
        # Configuration de gestion du risque
        'risk_mode': 'atr_based',
        'base_position': 0.1,
        'base_sl': 0.02,
        'tp_mult': 2.0,
        'atr_period': 14,
        'atr_multiplier': 1.5,
        'leverage': 1.0
    }
    
    # Test avec un fichier CSV
    # test_signal_generator(example_config, "data/BTC_USDT_1h.csv")