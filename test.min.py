""";Exemple d'utilisation du système refactorisé avec séparation claire des responsabilités.;""";import os;import pandas as pd;from core.study.study_manager import StudyManager;study_manager = StudyManager(base_dir="studies");study_name = study_manager.create_study(;name="BTC_Strategy",;description="Étude de stratégie sur BTC/USDT",;timeframe="1h",;asset="BTC/USDT",;tags=["crypto", "bitcoin"];);study_path = study_manager.get_study_path(study_name);from data.data_manager import get_data_manager;data_manager = get_data_manager();data = data_manager.download_data(;exchange="bitget",;symbol="BTC/USDT",;timeframe="1h",;start_date="2023-01-01",;end_date="2023-12-31";);data_manager.associate_study_with_data(;study_name=study_name,;exchange="bitget",;symbol="BTC/USDT",;timeframe="1h";);df = data_manager.load_study_data(study_name);from core.strategy.strategy_manager import create_strategy_manager_for_study;strategy_manager = create_strategy_manager_for_study(study_path);constructor = strategy_manager.create_strategy(;name="MA Crossover",;description="Stratégie de croisement de moyennes mobiles",;indicators_preset="trend_following";);constructor.add_indicator("EMA", "fast_ema", {"period": 10});constructor.add_indicator("EMA", "slow_ema", {"period": 20});constructor.add_entry_condition(;left_indicator="fast_ema",;operator="crosses_above",;right_indicator="slow_ema";);constructor.add_exit_condition(;left_indicator="fast_ema",;operator="crosses_below",;right_indicator="slow_ema";);strategy_id = strategy_manager.save_strategy();simulation_results = strategy_manager.run_simulation(df);backtest_id = strategy_manager.save_backtest_results();performance_report = strategy_manager.generate_performance_report();from core.optimization.parallel_optimizer import create_optimizer, OptimizationConfig;from core.optimization.search_config import get_predefined_search_space;optimization_config = OptimizationConfig(;n_trials=100,;search_space=get_predefined_search_space("trend_following"),;scoring_formula="standard",;n_jobs=4;);optimizer = create_optimizer(optimization_config);success, results = optimizer.run_optimization(study_path, df);if success:;print(f"Optimisation terminée avec succès. Meilleur score: {results['best_score']}");best_strategy_id = results['best_trials'][0]['strategy_id'];strategy_manager.load_strategy(best_strategy_id);simulation_results = strategy_manager.run_simulation(df);backtest_id = strategy_manager.save_backtest_results("optimized_backtest");else:;print("L'optimisation a échoué")